export interface IVpaid
{
    checkVPAIDInterface?(vpaidAdUnit): void;
    onVpaidAdPaused?(): void;
    onVpaidAdPlaying?(): void;
    onVpaidAdError?(message: string): void;
    onVpaidAdLog?(message: string): void;
    onVpaidAdUserAcceptInvitation?(): void;
    onVpaidAdUserMinimize?(): void;
    onVpaidAdUserClose?(): void;
    onVpaidAdSkippableStateChange?(): void;
    onVpaidAdExpandedChange?(): void;
    getVpaidAdExpanded?(): void;
    getVpaidAdSkippableState?(): any;
    onVpaidAdSizeChange?(): any;
    onVpaidAdDurationChange?(): any;
    onVpaidAdRemainingTimeChange?(): any;
    getVpaidAdRemainingTime?(): any;
    onVpaidAdImpression?(): void;
    onVpaidAdClickThru?(url, id, playerHandles): void;
    onVpaidAdInteraction?(id: string): void;
    onVpaidAdVideoStart?(): void;
    onVpaidAdVideoFirstQuartile?(): void;
    onVpaidAdVideoMidpoint?(): void;
    onVpaidAdVideoThirdQuartile?(): void;
    onVpaidAdVideoComplete?(): void;
    onVpaidAdLinearChange?(): void;
    getVpaidAdLinear?(): any;
    startVpaidAd?(): void;
    onVpaidAdLoaded?(): void;
    onStartVpaidAd?(): void;
    stopVpaidAd?(): void;
    hardStopVpaidAd?(deleteOtherVpaidAdsApart): void;
    onStopVpaidAd?(): void;
    onSkipVpaidAd?(): void;
    skipVpaidAd?(): void;
    setVpaidAdVolume?(val): void;
    getVpaidAdVolume?(): any;
    onVpaidAdVolumeChange?(): void;
    resizeVpaidAuto?(): void;
    resizeVpaidAd?(width, height, viewMode): void;
    pauseVpaidAd?(): void;
    resumeVpaidAd?(): void;
    expandVpaidAd?(): void;
    collapseVpaidAd?(): void;
    vpaidTimeoutTimerClear?(): void;
    vpaidTimeoutTimerStart?(): void;
    vpaidCallbackListenersAttach?(): void;
    vpaidCallbackListenersDetach?(): void;
    loadVpaid?(adListId, vpaidJsUrl): void;
    onVpaidEnded?(event): void;
    playMainVideoWhenVpaidFails?(errorCode): void;
    switchPlayerToVpaidMode?(): void;
}